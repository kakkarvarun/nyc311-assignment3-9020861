name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    # Make ALL values available to every step
    env:
      # repo Variables
      DB_HOST: ${{ vars.DB_HOST }}           # usually 127.0.0.1
      DB_PORT: ${{ vars.DB_PORT }}           # 3306
      DB_NAME: ${{ vars.DB_NAME }}           # nyc311
      APP_DB_USER: ${{ vars.APP_DB_USER }}   # appuser

      # repo Secrets
      APP_DB_PASSWORD: ${{ secrets.APP_DB_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      # convenience for the app/etl code that uses DB_USER/DB_PASSWORD
      DB_USER: ${{ vars.APP_DB_USER }}
      DB_PASSWORD: ${{ secrets.APP_DB_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install OS deps (Chrome + MySQL client + Docker CLI already present)
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg default-mysql-client
          wget -qO- https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install python-dotenv psutil pymysql pytest selenium webdriver-manager

      # ðŸ”§ Start MySQL as a background container (using env + secrets safely)
      - name: Start MySQL (Docker)
        run: |
          docker rm -f ci-mysql 2>/dev/null || true
          docker run -d --name ci-mysql -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}" \
            -e MYSQL_DATABASE="${DB_NAME}" \
            mysql:8

      - name: Wait for MySQL
        run: |
          for i in {1..40}; do
            mysql -h ${{ env.DB_HOST }} -uroot -p"${{ env.MYSQL_ROOT_PASSWORD }}" -e "SELECT 1" && break
            sleep 2
          done

      - name: Load schema
        run: |
          mysql -h ${{ env.DB_HOST }} -uroot -p"${{ env.MYSQL_ROOT_PASSWORD }}" < db/schema.sql

      - name: Create least-privileged app user
        run: |
          mysql -h ${{ env.DB_HOST }} -uroot -p"${{ env.MYSQL_ROOT_PASSWORD }}" <<'SQL'
          CREATE USER IF NOT EXISTS '${{ env.APP_DB_USER }}'@'%' IDENTIFIED BY '${{ env.APP_DB_PASSWORD }}';
          GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, ALTER ON ${{ env.DB_NAME }}.* TO '${{ env.APP_DB_USER }}'@'%';
          FLUSH PRIVILEGES;
          SQL

      - name: Run ETL on fixture
        run: |
          python etl/etl.py \
            --file tests/fixtures/311_sample.csv \
            --month 2023-01 \
            --chunksize 5000 \
            --batch 1000

      - name: Start Flask app
        run: |
          nohup python -c "from app.main import app; app.run(host='127.0.0.1', port=5000)" &
          sleep 3

      - name: Run tests (headless)
        env:
          APP_URL: http://127.0.0.1:5000
        run: pytest -q
